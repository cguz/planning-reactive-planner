;; Domain file generated by Cesar Guzman
;; on Thu Nov 28 15:41:08 2013
;; Modified Fri Jun 13 15:41:08 2014
(define (domain cPrint)
(:requirements :typing)
(:types location side color image sheet status
	resource -object
	always_active_r normal_r - resource
)
(:constants
	On Off - status
)
(:predicates
		;; resources' properties
		(CanStack ?resource - resource ?l2 - location)			; multi-valued
		(CanPrint ?resource - resource ?color - color ?l2 - location) 	; multi-valued
		
		;; sheet properties
		(Stacked ?sheet - sheet)
		(Printedwith ?sheet - sheet ?side - side ?color - color)	; multi-valued
		(Hasimage ?sheet - sheet ?side - side ?image - image)		; multi-valued
		(Prevsheet ?sheet1 - sheet ?sheet2 - sheet)			; multi-valued

		;; Connection bettween locations
		(Connection ?l1 ?l2 - location)
)
(:functions
	;; resources' properties
	(CanTurn ?resource - resource) - status

	(Is ?resource - normal_r) - status
	(In ?resource - resource) - location

	;; properties of the side
	(Oppositeside ?side1 - side) - side

	;; properties of the image
	(Imagecolor ?image - image) - color

	;; sheet properties
	(SideIs ?sheet - sheet) - side
	(Location ?sheet - sheet) - location ;; where is the sheet ?
)
(:action RepairResource
 :parameters (?resource - normal_r)
 :precondition (and
		(= (Is ?resource) Off)
	)
 :effect (and
		(assign (Is ?resource) On)
	)
)
(:action RepairCanTurn
 :parameters (?resource - resource)
 :precondition (and
		(=(CanTurn ?resource) Off)
	)
 :effect (and
		(assign (CanTurn ?resource) On)
	)
)
(:action Move1-Sheet
 :parameters (?resource - normal_r ?sheet - sheet ?l1 ?l2 - location)
 :precondition (and
		(= (Is ?resource) On)
		(= (In ?resource) ?l1)
		(= (Location ?sheet) ?l1)
		(Connection ?l1 ?l2))
 :effect (and
		(assign (Location ?sheet) ?l2))
)
(:action Move2-Sheet
 :parameters (?resource - always_active_r ?sheet - sheet ?l1 ?l2 - location)
 :precondition (and
		(= (In ?resource) ?l1)
		(= (Location ?sheet) ?l1)
		(Connection ?l1 ?l2))
 :effect (and
		(assign (Location ?sheet) ?l2))
)
(:action MoveAndInvert1-Sheet
 :parameters (?resource - normal_r ?sheet - sheet ?l1 ?l2 - location ?face - side ?o_face - side)
 :precondition (and
		(= (Is ?resource) On)
		(= (CanTurn ?resource) On)
		(= (SideIs ?sheet) ?face)
		(= (Oppositeside ?face) ?o_face)
		(= (In ?resource) ?l1)
		(= (Location ?sheet) ?l1)
		(Connection ?l1 ?l2))
 :effect (and
		(assign (Location ?sheet) ?l2)
		(assign (SideIs ?sheet) ?o_face))
)
(:action MoveAndInvert2-Sheet
 :parameters (?resource - always_active_r ?sheet - sheet ?l1 ?l2 - location ?face - side ?o_face - side)
 :precondition (and
		(= (CanTurn ?resource) On)
		(= (SideIs ?sheet) ?face)
		(= (Oppositeside ?face) ?o_face)
		(= (In ?resource) ?l1)
		(= (Location ?sheet) ?l1)
		(Connection ?l1 ?l2))
 :effect (and
		(assign (Location ?sheet) ?l2)
		(assign (SideIs ?sheet) ?o_face))
)
(:action Print-Simplex-Sheet
 :parameters ( ?resource - normal_r ?sheet - sheet ?face - side ?color - color ?image - image ?l1 - location ?l2 - location)
 :precondition (and
		(= (Is ?resource) On)
		(CanPrint ?resource ?color ?l2)
		(= (Imagecolor ?image) ?color)
		(= (In ?resource) ?l1)
		(= (SideIs ?sheet) ?face)
		(= (Location ?sheet) ?l1)
		(not (Printedwith ?sheet ?face ?color))
	)
 :effect (and
		(assign (Location ?sheet) ?l2)
		(Hasimage ?sheet ?face ?image)
		(Printedwith ?sheet ?face ?color))
)
(:action Print-SimplexAndInvert-Sheet
 :parameters ( 	?resource - normal_r ?sheet - sheet ?color - color ?image - image 
		?face - side ?otherside - side ?l1 - location ?l2 - location)
 :precondition (and
		(= (Is ?resource) On)
		(CanPrint ?resource ?color ?l2)
		(= (Imagecolor ?image) ?color)
		(= (In ?resource) ?l1)
		(= (SideIs ?sheet) ?face)
		(= (Location ?sheet) ?l1)
		(= (CanTurn ?resource) On)
		(= (Oppositeside ?face) ?otherside)
		(not (Printedwith ?sheet ?face ?color)))
 :effect (and
		(assign (SideIs ?sheet) ?otherside)
		(Hasimage ?sheet ?face ?image)
		(assign (Location ?sheet) ?l2)
		(Printedwith ?sheet ?face ?color))
)
(:action Stack-Sheet
 :parameters ( ?resource - always_active_r ?sheet - sheet ?prevsheet - sheet ?l1 - location ?l2 - location)
 :precondition (and
		(Stacked ?prevsheet)
		(CanStack ?resource ?l2)
		(Prevsheet ?sheet ?prevsheet)
		(= (Location ?prevsheet) ?l2)
		(= (In ?resource) ?l1)
		(= (Location ?sheet) ?l1))
 :effect (and
		(assign (Location ?sheet) ?l2)
		(Stacked ?sheet))
))
