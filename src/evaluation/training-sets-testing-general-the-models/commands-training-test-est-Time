## Estimating the time
library(randomForest)
 
# Function that returns Mean Absolute Error
mae <- function(error)
{
    sapply(abs(error),mean)
}

# Function that returns Mean Absolute Error by a factor between real value
fmae <- function(error, real)
{
    sapply(abs(error)/real,mean)
}

# Function that returns desviation standard Absolute Error
sdae <- function(error)
{
    sapply(abs(error),sd)
}

folder = "predicted_results/est_time"

training = "training-rover-regressed-all-filtering-pre-window"
test = "training-rover-regressed-all-filtering-pre-window"

d_test <- read.table(paste("../training/BackwardAllSequencesFilteringPreWindow/filtered",test,sep="-"), header=T)
m1_test <- d_test[,c("window", "pfile", "depth", "Rvar", "DRvar", "RvarRoot","FluentsRoot", "Producers", "ProducersU","Time", "N", "ENodes", "Domain")]

d <- read.table(paste("../training/BackwardAllSequencesFilteringPreWindow/filtered",training,sep="-"), header=T)
m1 <- d[,c("window", "depth", "Rvar", "DRvar", "RvarRoot","FluentsRoot", "Producers", "ProducersU","Time", "N", "ENodes", "Domain")]
attach(m1)

#CALCULO DE FACTOR DE RAMIFICACION DE MUESTRAS
BH3 = ((N^(1/depth))-0.34)

# preparing datas
y.data <- data.frame(
	B=BH3,
	Time=d[,c("Time")],
	N=d[,c("N")],
	ENodes=d[,c("ENodes")],
	depth=d[,c("depth")],
	window=d[,c("window")],
	Rvar=d[,c("Rvar")],
	DRvar=d[,c("DRvar")],
	RvarRoot=d[,c("RvarRoot")],
	FluentsRoot=d[,c("FluentsRoot")],
	Producers=d[,c("Producers")],
	ProducersU=d[,c("ProducersU")]
)


# multi linear predictive model
lm1 = lm(Time ~ depth+FluentsRoot+DRvar+Producers+Rvar+RvarRoot)

# random regression forest
# importance=TRUE , the importance of predictors are assessed.
# proximity=TRUE , proximity measure among the rows is calculated.
set.seed(37173)
rf_r_10_2 = randomForest(Time ~ depth+FluentsRoot+Producers+ProducersU+Rvar+DRvar+RvarRoot,data=y.data,importance=TRUE,proximity=TRUE,type=regression,ntree=10,mtry=2)
set.seed(37173)
rf_r_100_2 = randomForest(Time ~ depth+FluentsRoot+Producers+ProducersU+Rvar+DRvar,data=y.data,importance=TRUE,proximity=TRUE,type=regression,ntree=100,mtry=2)
set.seed(37173)
rf_r_100_4 = randomForest(Time ~ depth+FluentsRoot+Producers+ProducersU+Rvar+DRvar+RvarRoot,data=y.data,importance=TRUE,proximity=TRUE,type=regression,ntree=100,mtry=4)
set.seed(37173)
rf_r_100_6 = randomForest(Time ~ depth+FluentsRoot+Producers+ProducersU+Rvar+DRvar+RvarRoot,data=y.data,importance=TRUE,proximity=TRUE,type=regression,ntree=100,mtry=6)
set.seed(37173)
rf_r_100_7 = randomForest(Time ~ depth+FluentsRoot+Producers+ProducersU+Rvar+DRvar+RvarRoot,data=y.data,importance=TRUE,proximity=TRUE,type=regression,ntree=100,mtry=7)
set.seed(37173)
rf_r_500_2 = randomForest(Time ~ depth+FluentsRoot+Producers+ProducersU+Rvar+DRvar+RvarRoot,data=y.data,importance=TRUE,proximity=TRUE,type=regression,ntree=500,mtry=2)
set.seed(37173)
rf_r_500_4 = randomForest(Time ~ depth+FluentsRoot+Producers+ProducersU+Rvar+DRvar+RvarRoot,data=y.data,importance=TRUE,proximity=TRUE,type=regression,ntree=500,mtry=4)
set.seed(37173)
rf_r_500_6 = randomForest(Time ~ depth+FluentsRoot+Producers+ProducersU+Rvar+DRvar+RvarRoot,data=y.data,importance=TRUE,proximity=TRUE,type=regression,ntree=500,mtry=6)
set.seed(37173)
rf_r_500_7 = randomForest(Time ~ depth+FluentsRoot+Producers+ProducersU+Rvar+DRvar+RvarRoot,data=y.data,importance=TRUE,proximity=TRUE,type=regression,ntree=500,mtry=7)
set.seed(37173)
rf_r_1000_2 = randomForest(Time ~ depth+FluentsRoot+Producers+ProducersU+Rvar+DRvar+RvarRoot,data=y.data,importance=TRUE,proximity=TRUE,type=regression,ntree=1000,mtry=2)
set.seed(37173)
rf_r_1000_7 = randomForest(Time ~ depth+FluentsRoot+Producers+ProducersU+Rvar+DRvar+RvarRoot,data=y.data,importance=TRUE,proximity=TRUE,type=regression,ntree=1000,mtry=7)


# predictions
prediction_lm1 = predict(lm1, list(m1_test["depth"], m1_test["FluentsRoot"], m1_test["Producers"], m1_test["Rvar"], m1_test["RvarRoot"]))
prediction_rf_r_10_2 = predict(rf_r_10_2, list(m1_test["depth"], m1_test["FluentsRoot"], m1_test["Producers"], m1_test["ProducersU"], m1_test["Rvar"], m1_test["DRvar"], m1_test["RvarRoot"]))
prediction_rf_r_100_2 = predict(rf_r_100_2, list(m1_test["depth"], m1_test["FluentsRoot"], m1_test["Producers"], m1_test["ProducersU"], m1_test["Rvar"], m1_test["DRvar"], m1_test["RvarRoot"]))
prediction_rf_r_100_4 = predict(rf_r_100_4, list(m1_test["depth"], m1_test["FluentsRoot"], m1_test["Producers"], m1_test["ProducersU"], m1_test["Rvar"], m1_test["DRvar"], m1_test["RvarRoot"]))
prediction_rf_r_100_6 = predict(rf_r_100_6, list(m1_test["depth"], m1_test["FluentsRoot"], m1_test["Producers"], m1_test["ProducersU"], m1_test["Rvar"], m1_test["DRvar"], m1_test["RvarRoot"]))
prediction_rf_r_100_7 = predict(rf_r_100_7, list(m1_test["depth"], m1_test["FluentsRoot"], m1_test["Producers"], m1_test["ProducersU"], m1_test["Rvar"], m1_test["DRvar"], m1_test["RvarRoot"]))
prediction_rf_r_500_2 = predict(rf_r_500_2, list(m1_test["depth"], m1_test["FluentsRoot"], m1_test["Producers"], m1_test["ProducersU"], m1_test["Rvar"], m1_test["DRvar"], m1_test["RvarRoot"]))
prediction_rf_r_500_4 = predict(rf_r_500_4, list(m1_test["depth"], m1_test["FluentsRoot"], m1_test["Producers"], m1_test["ProducersU"], m1_test["Rvar"], m1_test["DRvar"], m1_test["RvarRoot"]))
prediction_rf_r_500_6 = predict(rf_r_500_6, list(m1_test["depth"], m1_test["FluentsRoot"], m1_test["Producers"], m1_test["ProducersU"], m1_test["Rvar"], m1_test["DRvar"], m1_test["RvarRoot"]))
prediction_rf_r_500_7 = predict(rf_r_500_7, list(m1_test["depth"], m1_test["FluentsRoot"], m1_test["Producers"], m1_test["ProducersU"], m1_test["Rvar"], m1_test["DRvar"], m1_test["RvarRoot"]))
prediction_rf_r_1000_2 = predict(rf_r_1000_2, list(m1_test["depth"], m1_test["FluentsRoot"], m1_test["Producers"], m1_test["ProducersU"], m1_test["Rvar"], m1_test["DRvar"], m1_test["RvarRoot"]))
prediction_rf_r_1000_7 = predict(rf_r_1000_7, list(m1_test["depth"], m1_test["FluentsRoot"], m1_test["Producers"], m1_test["ProducersU"], m1_test["Rvar"], m1_test["DRvar"], m1_test["RvarRoot"]))


error_prediction_lm1 <- m1_test["Time"] - prediction_lm1
error_rf_r_10_2 <- m1_test["Time"] - prediction_rf_r_10_2
error_rf_r_100_2 <- m1_test["Time"] - prediction_rf_r_100_2
error_rf_r_100_4 <- m1_test["Time"] - prediction_rf_r_100_4
error_rf_r_100_6 <- m1_test["Time"] - prediction_rf_r_100_6
error_rf_r_100_7 <- m1_test["Time"] - prediction_rf_r_100_7
error_rf_r_500_2 <- m1_test["Time"] - prediction_rf_r_500_2
error_rf_r_500_4 <- m1_test["Time"] - prediction_rf_r_500_4
error_rf_r_500_6 <- m1_test["Time"] - prediction_rf_r_500_6
error_rf_r_500_7 <- m1_test["Time"] - prediction_rf_r_500_7
error_rf_r_1000_2 <- m1_test["Time"] - prediction_rf_r_1000_2
error_rf_r_1000_7 <- m1_test["Time"] - prediction_rf_r_1000_7

model.data <- data.frame(
	domain=m1_test["Domain"],
	pfile=m1_test["pfile"],
	window=m1_test["window"],
	depth=m1_test["depth"],
	Time=m1_test["Time"],
	error_prediction_lm1=error_prediction_lm1,
	error_rf_r_10_2=error_rf_r_10_2,
	error_rf_r_100_2=error_rf_r_100_2,
	error_rf_r_100_4=error_rf_r_100_4,
	error_rf_r_100_6=error_rf_r_100_6,
	error_rf_r_100_7=error_rf_r_100_7,
	error_rf_r_500_2=error_rf_r_500_2,
	error_rf_r_500_4=error_rf_r_500_4,
	error_rf_r_500_6=error_rf_r_500_6,
	error_rf_r_500_7=error_rf_r_500_7,
	error_rf_r_1000_7=error_rf_r_1000_7,
	error_rf_r_1000_2=error_rf_r_1000_2
)

write.csv(model.data,paste(paste(folder,training,sep="-"),"csv",sep="."))

col_mae <- c(
mae(error_prediction_lm1),
mae(error_rf_r_10_2),
mae(error_rf_r_100_2),
mae(error_rf_r_100_4),
mae(error_rf_r_100_6),
mae(error_rf_r_100_7),
mae(error_rf_r_500_2),
mae(error_rf_r_500_4),
mae(error_rf_r_500_6),
mae(error_rf_r_500_7),
mae(error_rf_r_1000_2),
mae(error_rf_r_1000_7)
)

col_fmae <- c(
fmae(error_prediction_lm1, m1_test["Time"]),
fmae(error_rf_r_10_2, m1_test["Time"]),
fmae(error_rf_r_100_2, m1_test["Time"]),
fmae(error_rf_r_100_4, m1_test["Time"]),
fmae(error_rf_r_100_6, m1_test["Time"]),
fmae(error_rf_r_100_7, m1_test["Time"]),
fmae(error_rf_r_500_2, m1_test["Time"]),
fmae(error_rf_r_500_4, m1_test["Time"]),
fmae(error_rf_r_500_6, m1_test["Time"]),
fmae(error_rf_r_500_7, m1_test["Time"]),
fmae(error_rf_r_1000_2, m1_test["Time"]),
fmae(error_rf_r_1000_7, m1_test["Time"])
)

# desviation standard absolute error
col_sd <- c(
sdae(error_prediction_lm1),
sdae(error_rf_r_10_2),
sdae(error_rf_r_100_2),
sdae(error_rf_r_100_4),
sdae(error_rf_r_100_6),
sdae(error_rf_r_100_7),
sdae(error_rf_r_500_2),
sdae(error_rf_r_500_4),
sdae(error_rf_r_500_6),
sdae(error_rf_r_500_7),
sdae(error_rf_r_1000_2),
sdae(error_rf_r_1000_7)
)

add_model.data = data.frame(col_mae,col_fmae,col_sd)
write.csv(add_model.data,paste(paste(folder,training,sep="-"),"add.csv",sep="-"))


