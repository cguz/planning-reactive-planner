## testing the branching factor
library(randomForest)

 
# Function that returns Mean Absolute Error
mae <- function(error)
{
    mean(abs(error))
}

# Function that returns Mean Absolute Error factor
fmae <- function(error, real)
{
   mean(abs(error/real))
}

# Function that returns desviation standard Absolute Error
sdae <- function(error)
{
    sd(abs(error))
}


folder = "predicted_results/est_b"

training = "training-cPrint-regressed-all-filtering-pre-window"
test = "training-cPrint-regressed-all-filtering-pre-window"

d_test <- read.table(paste("../training-sets/BackwardAllSequencesFilteringPreWindow/16-06-2014/filtered",test,sep="-"), header=T)
m1_test <- d_test[,c("window", "pfile", "depth", "Rvar", "DRvar", "RvarRoot","FluentsRoot", "Producers", "ProducersU","Time", "N", "ENodes", "Domain")]

d <- read.table(paste("../training-sets/BackwardAllSequencesFilteringPreWindow/16-06-2014/filtered",training,sep="-"), header=T)
m1 <- d[,c("window", "pfile", "depth", "Rvar", "DRvar", "RvarRoot","FluentsRoot", "Producers", "ProducersU","Time", "N", "ENodes", "Domain")]
attach(m1)

#CALCULO DE FACTOR DE RAMIFICACION DE MUESTRAS
BH3 = ((N^(1/depth))-0.34)

# preparing datas
y.data <- data.frame(
	B=BH3,
	Time=d[,c("Time")],
	N=d[,c("N")],
	ENodes=d[,c("ENodes")],
	depth=d[,c("depth")],
	window=d[,c("window")],
	Rvar=d[,c("Rvar")],
	DRvar=d[,c("DRvar")],
	RvarRoot=d[,c("RvarRoot")],
	FluentsRoot=d[,c("FluentsRoot")],
	Producers=d[,c("Producers")],
	ProducersU=d[,c("ProducersU")]
)


## Estimating the branching factor

lm1 = lm(BH3 ~ depth+FluentsRoot+Producers+Rvar+RvarRoot)
lm2 = lm(BH3 ~ depth+FluentsRoot+Producers)

BH3_test = ((m1_test["N"]^(1/m1_test["depth"]))-0.34)

# predictions
prediction_lm1 = predict(lm1, list(m1_test["depth"], m1_test["FluentsRoot"], m1_test["Producers"], m1_test["Rvar"], m1_test["RvarRoot"])) 
prediction_lm2 = predict(lm2, list(m1_test["depth"], m1_test["FluentsRoot"], m1_test["Producers"])) 

# Calculate error
error_prediction_lm1 <- BH3_test - prediction_lm1
error_prediction_lm2 <- BH3_test - prediction_lm2

model.data <- data.frame(
	domain=m1_test["Domain"],
	pfile=m1_test["pfile"],
	window=m1_test["window"],
	depth=m1_test["depth"],
	B=BH3_test,
	error_prediction_lm1=error_prediction_lm1,
	error_prediction_lm2=error_prediction_lm2
)

write.csv(model.data,paste(paste(folder,training,sep="-"),"csv",sep="."))

col_mae <- c(
mae(error_prediction_lm1),
mae(error_prediction_lm2)
)

# error model factor
col_fmae <- c(
fmae(error_prediction_lm1,BH3_test),
fmae(error_prediction_lm2,BH3_test)
)

# desviation standard absolute error
col_sd <- c(
sdae(error_prediction_lm1),
sdae(error_prediction_lm2)
)

add_model.data = data.frame(col_mae,col_fmae,col_sd)
write.csv(add_model.data,paste(paste(folder,training,sep="-"),"add.csv",sep="-"))



folder = "predicted_results/est_N"

# calculating the real nodes
real_lm1 = (prediction_lm1+0.34)^m1_test["depth"]
real_lm2 = (prediction_lm2+0.34)^m1_test["depth"]


# Calculate error
error_prediction_lm1 <- m1_test["N"] - real_lm1
error_prediction_lm2 <- m1_test["N"] - real_lm2


model.data <- data.frame(
	domain=m1_test["Domain"],
	pfile=m1_test["pfile"],
	window=m1_test["window"],
	depth=m1_test["depth"],
	N=m1_test["N"],
	error_prediction_lm1=error_prediction_lm1,
	error_prediction_lm2=error_prediction_lm2
)


write.csv(model.data,paste(paste(folder,training,sep="-"),"csv",sep="."))

col_mae <- c(
mae(error_prediction_lm1),
mae(error_prediction_lm2)
)

# error model factor
col_fmae <- c(
fmae(error_prediction_lm1,m1_test["N"]),
fmae(error_prediction_lm2,m1_test["N"])
)

# desviation standard absolute error
col_sd <- c(
sdae(error_prediction_lm1),
sdae(error_prediction_lm2)
)

add_model.data = data.frame(col_mae,col_fmae,col_sd)
write.csv(add_model.data,paste(paste(folder,training,sep="-"),"add.csv",sep="-"))



folder = "predicted_results/est_time"

# estimating the time with the testing real nodes calculated with the estimating branching factor
est_time_lm1 = real_lm1*mean(Time/N)
est_time_lm2 = real_lm2*mean(Time/N)

# estimating the time by a linear predictive model
lmt1 = lm(Time ~ depth+FluentsRoot+Producers+Rvar+RvarRoot)

# estimating the time by random forest
set.seed(37173)
rf_r_100_3 = randomForest(Time ~ depth+FluentsRoot+Producers,data=y.data,importance=TRUE,proximity=TRUE,type=regression,ntree=100,mtry=3)

set.seed(37173)
rf_r_100_3_r = randomForest(Time ~ depth+FluentsRoot+Producers,data=y.data,importance=TRUE,proximity=TRUE,type=regression,ntree=100,mtry=3,replace=TRUE)


# predictions
prediction_rf_r_100_3 = predict(rf_r_100_3, list(m1_test["depth"], m1_test["FluentsRoot"], m1_test["Producers"]))
prediction_rf_r_100_3_r = predict(rf_r_100_3_r, list(m1_test["depth"], m1_test["FluentsRoot"], m1_test["Producers"]))
prediction_lmt1 = predict(lmt1, list(m1_test["depth"], m1_test["FluentsRoot"], m1_test["Producers"], m1_test["Rvar"], m1_test["RvarRoot"])) 

# Calculate error
error_prediction_lm1 <- m1_test["Time"] - est_time_lm1
error_prediction_lm2 <- m1_test["Time"] - est_time_lm2
error_prediction_lmt1 <- m1_test["Time"] - prediction_lmt1
error_prediction_rf_r_100_3 <- m1_test["Time"] - prediction_rf_r_100_3
error_prediction_rf_r_100_3_r <- m1_test["Time"] - prediction_rf_r_100_3_r


model.data <- data.frame(
	domain=m1_test["Domain"],
	pfile=m1_test["pfile"],
	window=m1_test["window"],
	depth=m1_test["depth"],
	Time=m1_test["Time"],
	error_prediction_lm1=error_prediction_lm1,
	error_prediction_lm2=error_prediction_lm2,
	error_prediction_lmt1=error_prediction_lmt1,
	error_prediction_rf_r_100_3=error_prediction_rf_r_100_3,
	error_prediction_rf_r_100_3_r=error_prediction_rf_r_100_3_r
)


write.csv(model.data,paste(paste(folder,training,sep="-"),"csv",sep="."))

col_mae <- c(
mae(error_prediction_lm1),
mae(error_prediction_lm2),
mae(error_prediction_lmt1),
mae(error_prediction_rf_r_100_3),
mae(error_prediction_rf_r_100_3_r)
)

# error model factor
col_fmae <- c(
fmae(error_prediction_lm1,m1_test["Time"]),
fmae(error_prediction_lm2,m1_test["Time"]),
fmae(error_prediction_lmt1,m1_test["Time"]),
fmae(error_prediction_rf_r_100_3,m1_test["Time"]),
fmae(error_prediction_rf_r_100_3_r,m1_test["Time"])
)

# desviation standard absolute error
col_sd <- c(
sdae(error_prediction_lm1),
sdae(error_prediction_lm2),
sdae(error_prediction_lmt1),
sdae(error_prediction_rf_r_100_3),
sdae(error_prediction_rf_r_100_3_r)
)

add_model.data = data.frame(col_mae,col_fmae,col_sd)
write.csv(add_model.data,paste(paste(folder,training,sep="-"),"add.csv",sep="-"))



